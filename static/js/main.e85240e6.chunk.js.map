{"version":3,"sources":["static/audios.js","App.js","reportWebVitals.js","index.js"],"names":["audios","img","process","src","singer","songName","App","songRef","useRef","useState","Wave","wave","barValue","setBarValue","isPaused","setIsPaused","currentSongIndex","setCurrentSongIndex","hasChanged","setHasChanged","darkMode","setDarkMode","currentSong","useEffect","window","document","getElementById","addEventListener","e","current","target","fromElement","type","colors","goToNextSong","value","nextSongIndex","lastSongIndex","length","console","log","className","onChange","isChecked","checked","body","style","background","handleModeChange","effect","alt","height","width","id","autoPlay","onEnded","onTimeUpdate","currentTime","min","max","duration","onClick","play","pause","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e85240e6.chunk.js","sourcesContent":["const audios = [\r\n  {\r\n    img: process.env.PUBLIC_URL + \"/assets/img1.jpg\",\r\n    src: process.env.PUBLIC_URL + \"/assets/audio1.mp3\",\r\n    singer: \"Post Malone\",\r\n    songName: \"Rockstar\",\r\n  },\r\n  {\r\n    img: process.env.PUBLIC_URL + \"/assets/img2.jpg\",\r\n    src: process.env.PUBLIC_URL + \"/assets/audio2.mp3\",\r\n    singer: \"The Weeknd\",\r\n    songName: \"Starboy\",\r\n  },\r\n  {\r\n    img: process.env.PUBLIC_URL + \"/assets/img3.jpg\",\r\n    src: process.env.PUBLIC_URL + \"/assets/audio4.mp3\",\r\n    singer: \"Drake\",\r\n    songName: \"One Dance\",\r\n  },\r\n  {\r\n    img: process.env.PUBLIC_URL + \"/assets/img4.jpg\",\r\n    src: process.env.PUBLIC_URL + \"/assets/audio3.mp3\",\r\n    singer: \"Randall\",\r\n    songName: \"Wahran\",\r\n  },\r\n];\r\n\r\nexport default audios;\r\n","import React, { useState, useRef, useEffect } from \"react\";\nimport \"./App.css\";\nimport { LazyLoadImage } from \"react-lazy-load-image-component\";\nimport audios from \"./static/audios\";\nimport Wave from \"@foobar404/wave\";\nimport \"react-lazy-load-image-component/src/effects/blur.css\";\n\nfunction App() {\n  const songRef = useRef(null);\n  let [wave] = useState(new Wave());\n\n  const [barValue, setBarValue] = useState(0);\n  const [isPaused, setIsPaused] = useState(true);\n  const [currentSongIndex, setCurrentSongIndex] = useState(0);\n  const [hasChanged, setHasChanged] = useState(false);\n  const [darkMode, setDarkMode] = useState(false);\n  const currentSong = audios[currentSongIndex];\n\n  useEffect(() => {\n    window.document\n      .getElementById(\"audio_element\")\n      .addEventListener(\"loadedmetadata\", (e) => {\n        //console.log(\"this\", e);\n        songRef.current = e.target;\n      });\n    wave.fromElement(\"audio_element\", \"canvas_element\", {\n      type: \"flower\",\n      colors: [\"black\", \"white\"],\n    });\n  }, [wave, currentSongIndex]);\n\n  const goToNextSong = (value) => {\n    const nextSongIndex = currentSongIndex + value;\n    const firstSongIndex = 0;\n    const lastSongIndex = audios.length - 1;\n    console.log(\"value\", nextSongIndex);\n    setCurrentSongIndex(nextSongIndex);\n    if (nextSongIndex >= audios.length) {\n      setCurrentSongIndex(firstSongIndex);\n    } else if (nextSongIndex < firstSongIndex) {\n      setCurrentSongIndex(lastSongIndex);\n    } else {\n      setCurrentSongIndex(nextSongIndex);\n    }\n    setHasChanged(true);\n    setIsPaused(false);\n  };\n  const handleModeChange = (e) => {\n    let isChecked = e.target.checked;\n    console.log(\"isChecked\", isChecked);\n    if (isChecked) {\n      document.body.style.background = \"rgb(34,38,42)\";\n      setDarkMode(true);\n    } else {\n      document.body.style.background = \"rgb(224,229,236)\";\n      setDarkMode(false);\n    }\n    // do whatever you want with isChecked value\n  };\n  return (\n    <div className=\"container\">\n      <div className={`iphone neu ${darkMode ? \"dark_mode\" : \"\"}`}>\n        <div className=\"title\">\n          {/* <div>NOW PLAYING</div> */}\n          <div>\n            <input\n              type=\"checkbox\"\n              className=\"toggle-switch\"\n              onChange={(e) => handleModeChange(e)}\n            />\n          </div>\n        </div>\n        <div className=\"album-cover\">\n          <div className=\"\" />\n          <div className=\"img-container\">\n            <LazyLoadImage\n              effect=\"blur\"\n              alt=\"music\"\n              className={isPaused ? \"img\" : \"img rotate\"}\n              src={currentSong.img}\n            />\n            <canvas height=\"240\" width=\"240\" id=\"canvas_element\" />\n          </div>\n          <h2 className=\"song-title\">{currentSong.songName}</h2>\n          <h3 className=\"artist-title\">{currentSong.singer}</h3>\n          <audio\n            autoPlay={hasChanged}\n            onEnded={() => goToNextSong(1)}\n            src={currentSong.src}\n            id=\"audio_element\"\n            onTimeUpdate={() => setBarValue(songRef.current.currentTime)}\n          />\n        </div>\n        <div>\n          <input\n            value={barValue}\n            type=\"range\"\n            min=\"0\"\n            max={songRef.current?.duration ? songRef.current.duration : \"100\"}\n            className={`input track neu ${darkMode ? \"dark_mode\" : \"\"}`}\n            onChange={(e) => (songRef.current.currentTime = e.target.value)}\n          />\n          <div />\n        </div>\n        <div className=\"lyrics\">\n          <i className=\"fas fa-angle-up\" />\n          <span>LYRICS</span>\n        </div>\n        <div className=\"buttons\">\n          <button\n            className={`btn lg neu ${darkMode ? \"dark_mode\" : \"\"}`}\n            onClick={() => goToNextSong(-1)}\n          >\n            <i className=\"fas fa-backward\" />\n          </button>\n\n          {isPaused ? (\n            <button\n              className={`btn lg neu ${darkMode ? \"dark_mode\" : \"\"}`}\n              onClick={() => {\n                songRef.current.play();\n                setIsPaused(!isPaused);\n              }}\n            >\n              <i className=\"fas fa-play\"></i>\n            </button>\n          ) : (\n            <button\n              className={`btn lg neu ${darkMode ? \"dark_mode\" : \"\"}`}\n              onClick={() => {\n                songRef.current.pause();\n                setIsPaused(!isPaused);\n              }}\n            >\n              <i className=\"fas fa-pause\"></i>\n            </button>\n          )}\n          <button\n            className={`btn lg neu ${darkMode ? \"dark_mode\" : \"\"}`}\n            onClick={() => goToNextSong(1)}\n          >\n            <i className=\"fas fa-forward\" />\n          </button>\n        </div>\n        <span className=\"created\">Â© Shihas</span>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}